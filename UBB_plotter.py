import os
import subprocess
import warnings

import numpy as np
import fitsio as fio
import matplotlib.pyplot as plt
import matplotlib.gridspec as mgs
from skimage.measure import block_reduce
import argparse

class UBBPlotter:
    def __init__(self, filename, burst_mjd):
        self.fname = filename
        self.burst_mjd = burst_mjd
        self.primary = fio.read_header(self.fname, ext=0)
        imjd = self.primary['STT_IMJD']
        smjd = self.primary['STT_SMJD']
        soffs = self.primary['STT_OFFS']
        self.tmjd = imjd + (smjd / 86_400.) + (soffs / 86_400.)
        self.toa = (self.burst_mjd - self.tmjd) * 86400 
        print(self.toa)

    def run_dspsr_command(self, dm, bins, output_filename):
        # Construct the dspsr command
        command1 = [
            'dspsr',
            '-S', str(self.toa),
            '-T', '1',
            '-c', '1',
            '--scloffs',
            '-D', str(dm),
            '-O', output_filename,
            self.fname
        ]

        # Run the dspsr command
        result1 = subprocess.run(command1, capture_output=True, text=True)

        # Check if the command was successful
        if result1.returncode == 0:
            print("dspsr command executed successfully:")
            print(result1.stdout)
        else:
            print("dspsr command failed with error:")
            print(result1.stderr)
            return  # Exit the function if the dspsr command fails

        # Run the paz command on the output file generated by dspsr
        output_ar_file = output_filename + '.ar'  # Assuming the output of dspsr has a .ar extension
        command2 = [
            'paz',
            '-z', "661 662 663 664 665 666 648 649 650 651 652 653 654 655 656 657 658 659 660 \
994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 \
1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 \
1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \
1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 \
1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 \
1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 \
1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 \
1101 1102 1103 1104 1105 1106 \
299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 \
317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 \
336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 \
473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 \
491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 \
509 510 511 \
353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 \
371 372 373 374 375 376 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 \
1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 \
1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 \
429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 \
447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 \
465 466 467 468 469 470 471 472 \
512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 \
530 531 532 533 \
543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 \
561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 \
579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 \
597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 \
615 616 617 618 619 620 621 622 623 624 \
261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 \
279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 \
297 298 \
785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 \
803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 \
821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 \
839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 \
1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 \
1250 \
90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 \
110 111 112 113 114 115 116 117 \
894 895 896 897 898 \
858 859 860 861 862 863 864 865 \
387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 \
404 405 406 407 \
534 535 536 537 538 539 540 541 542 \
132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149",

            '-e', 'pazi',
            output_ar_file
        ]

        # Run the paz command
        result2 = subprocess.run(command2, capture_output=True, text=True)

        # Check if the command was successful
        if result2.returncode == 0:
            print("paz command executed successfully:")
            print(result2.stdout)
        else:
            print("paz command failed with error:")
            print(result2.stderr)
            return  # Exit the function if the paz command fails

        # Plotting (for demonstration, we plot a simple figure)
        self.plot_result(output_filename)

    def plot_result(self, output_filename):
        # Placeholder for actual plotting logic
        # Read the generated output file and create plots
        # For now, we'll just create a simple plot as a placeholder
        fig, ax = plt.subplots()
        ax.plot(np.random.rand(100))
        ax.set_title(f"Plot for {output_filename}")
        plt.show()

def main():
    parser = argparse.ArgumentParser(description="Run dspsr command with specified parameters.")
    parser.add_argument('-f', '--filename', type=str, required=True, help='Input FITS filename')
    parser.add_argument('-m', '--mjd', type=float, required=True, help='Burst MJD')
    parser.add_argument('-D', '--dm', type=float, required=True, help='Dispersion Measure (DM)')
    parser.add_argument('-b', '--bins', type=int, required=True, help='Number of phase bins')
    parser.add_argument('-O', '--output', type=str, required=True, help='Output filename')

    args = parser.parse_args()

    plotter = UBBPlotter(args.filename, args.mjd)
    plotter.run_dspsr_command(args.dm, args.bins, args.output)

if __name__ == "__main__":
    main()

